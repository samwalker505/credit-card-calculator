{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["client","axios","create","baseURL","App","getCreditCards","a","get","params","api_key","view","resp","setState","creditCards","data","records","flatMap","r","fields","console","log","calculateResults","inputs","sorted","state","map","c","is_insurance_included","is_payme_included","is_octopus_included","sign_amount","return_amount","effective_spending","saved_amount","Math","floor","filter","sort","c1","c2","calculatedResults","onSubmitClicked","e","preventDefault","reduce","acc","key","val","Number","document","getElementById","value","onLinkClicked","ReactGA","event","category","action","JSON","stringify","window","location","href","ref","this","initialize","pageview","className","style","display","htmlFor","type","id","aria-describedby","placeholder","onClick","scope","index","credit_card_name","bank","undefined","React","Component","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.76d13414.chunk.js","sourcesContent":["import React, { FormEvent, MouseEvent } from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport ReactGA from 'react-ga';\n\nconst client = axios.create({\n  baseURL: 'https://api.airtable.com/v0/appJxfRyoGTuGkiIq/Credit%20card%20info'\n});\n\ninterface CreditCard {\n  credit_card_name: string;\n  bank: string;\n  annual_fee: string;\n  sign_amount: number;\n  return_amount: number;\n  return_ratio: number;\n  annual_income: number;\n  is_insurance_included: boolean;\n  is_payme_included: boolean,\n  is_octopus_included: boolean,\n  ref: string,\n}\n\ninterface CreditCardRow {\n  id: string;\n  fields: CreditCard[];\n  createdTime: string;\n}\n\ninterface CalculatedResult extends CreditCard {\n  effective_spending: number;\n  saved_amount: number;\n}\n\nclass App extends React.Component<{}, { creditCards: CreditCard[], calculatedResults: CalculatedResult[] | undefined, inputs: { [key: string]: number} }> {\n  componentDidMount() {\n    if (!this.state || !this.state.creditCards) {\n      this.getCreditCards();\n    }\n    ReactGA.initialize('UA-91087648-3');\n    ReactGA.pageview('/homepage');\n  }\n  getCreditCards = async () => {\n    try {\n      const resp = await client.get<{ records: CreditCardRow[] }>('/', {\n        params: {\n          api_key: 'keyx3RhI4TS7m4YEx',\n          view: \"Grid view\"\n        }\n      })\n      this.setState({creditCards: resp.data.records.flatMap(r => r.fields)})\n    } catch (err) {\n      console.log(err)\n    }\n  }\n\n  calculateResults = (inputs: {[key: string]: number}) => {\n    const { creditCards } = this.state;\n    const calculateResults: CalculatedResult[] = creditCards.map((c) => {\n      const { is_insurance_included, \n              is_payme_included, \n              is_octopus_included,\n              sign_amount, \n              return_amount\n              } = c\n      let effective_spending = 0;\n      effective_spending += is_insurance_included ? inputs['insurance']: 0;\n      effective_spending += is_payme_included ? inputs['epayment']: 0;\n      effective_spending += is_octopus_included ? inputs['octopus']: 0;\n      effective_spending += inputs['general'];\n      const saved_amount = Math.floor(effective_spending / sign_amount) * return_amount;\n      return { ...c, effective_spending, saved_amount }\n    })\n    const sorted = calculateResults.filter(c => !!c.saved_amount).sort((c1, c2) => c1.saved_amount > c2.saved_amount ? -1 : 1);\n    this.setState({ calculatedResults: sorted });\n  }\n\n  onSubmitClicked = (e: FormEvent) => {\n    e.preventDefault();\n    const inputs = ['insurance', 'epayment', 'octopus', 'general'].reduce((acc, key) => {\n      \n      const val = Number((document.getElementById(key) as HTMLInputElement).value);\n      acc[key] = val\n      return acc;\n    }, { } as { [key: string]: number})\n    this.setState({inputs})\n    this.calculateResults(inputs);\n  }\n\n  onLinkClicked = (c:CalculatedResult) => {\n    return (e: MouseEvent<HTMLAnchorElement>) => {\n      e.preventDefault();\n      ReactGA.event({\n        category: 'Card',\n        action: JSON.stringify(c),\n      })\n      window.location.href = c.ref;\n    }\n  }\n\n  render() {\n    const { calculatedResults, inputs } = !!this.state && this.state \n    return (\n      <div className='container'>\n        <header>\n          <h1>信用卡計算器</h1>\n          <h1>Credit Card Calculator</h1>\n        </header>\n        <main>\n          <form style={ {display: `${calculatedResults ? 'none': ''}`} }>\n            <p>請輸入每月支出 please enter monthly expense</p>\n            <div className=\"form-group\">\n              <label htmlFor=\"insurance\">保費 Insurance</label>\n              <input type='number' className=\"form-control\" id=\"insurance\" aria-describedby=\"emailHelp\" placeholder=\"保費 Insurance\" />\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"epayment\">電子銀包充值 E Payment</label>\n              <input type=\"number\" className=\"form-control\" id=\"epayment\" placeholder=\"電子銀包充直 E Payment\" />\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"octopus\">八達通 Octopus</label>\n              <input type=\"number\" className=\"form-control\" id=\"octopus\" placeholder=\"八達通 Octopus\" />\n            </div>          \n            <div className=\"form-group\">\n              <label htmlFor=\"general\">一般簽帳 General</label>\n              <input type=\"number\" className=\"form-control\" id=\"general\" placeholder=\"一般簽帳 General\" />\n            </div>\n            <button type=\"submit\" className=\"btn btn-primary\" onClick={this.onSubmitClicked}>提交 Submit</button>\n          </form>\n          <div style={ {display: `${calculatedResults ? '': 'none'}`} }>\n            {\n              inputs &&\n              <p>保費 Insurance: ${inputs['insurance']}, 電子銀包充值 E Payment: ${inputs['epayment']}, 八達通 Octopus: ${inputs['octopus']}, 一般簽帳 General: ${inputs['general']} </p>\n            }\n            <table className=\"table\">\n              <thead className=\"thead-dark\">\n                <tr>\n                  <th scope=\"col\">信用卡 - Credit Card</th>\n                  <th scope=\"col\">銀行 - Bank</th>\n                  <th scope=\"col\">有效簽帳 - Effective Spending</th>\n                  <th scope=\"col\">節省(每月) － Saved(per month)</th>\n                </tr>\n              </thead>\n              <tbody>\n                {\n                  calculatedResults &&\n                  calculatedResults.map((c, index) => {\n                    return (\n                      <tr>\n                        <th scope=\"row\">\n                          <a href='#' onClick={this.onLinkClicked(c)}>{c.credit_card_name}</a>\n                        </th>\n                        <td>{c.bank}</td>\n                        <td>{c.effective_spending}</td>\n                        <td>{c.saved_amount}</td>\n                      </tr>\n                    )\n                  })\n                }\n              </tbody>\n            </table>\n            <button type=\"submit\" className=\"btn btn-primary\" onClick={() => this.setState({calculatedResults: undefined})}>重設 Reset</button>\n          </div>\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}